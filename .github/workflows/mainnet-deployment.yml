name: Mainnet Deployment

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

jobs:
  deploy-vm2:
    runs-on: ubuntu-latest
    steps:
      - name: Health check VM1
        run: |
          VM1_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.VM1_IP }}:8000/health || echo "failed")

          if [[ "$VM1_HEALTH" != "200" ]]; then
            echo "VM1 is not healthy. Cannot proceed with rolling deployment."
            exit 1
          fi

      - name: Deploy to VM2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM2_IP }}
          username: root
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -e
            REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
            REPO_URL="${{ github.server_url }}/${{ github.repository }}.git"
            BRANCH="${{ github.event.inputs.branch }}"

            mkdir -p /opt/turbo-deploy
            cd /opt/turbo-deploy

            echo "Current directory: $(pwd)"
            
            # Clone/pull latest code
            if [ -d "$REPO_NAME" ]; then
              cd $REPO_NAME
              echo "Pulling latest changes in existing repository"
              git fetch
              git checkout $BRANCH
              git pull origin $BRANCH
            else
              echo "Cloning fresh repository"
              git clone -b $BRANCH $REPO_URL $REPO_NAME
              cd $REPO_NAME
            fi
            
            echo "Repository directory contents:"
            ls -la
            
            # Check if docker-compose.yml exists
            if [ ! -f "docker-compose.yml" ]; then
              echo "Error: docker-compose.yml not found!"
              echo "Current directory: $(pwd)"
              echo "Directory contents:"
              ls -la
              exit 1
            fi
            
            echo '${{ secrets.WHITELIST_JSON }}' > whitelist.json
            
            # Remove fallback_monitor service as this is VM2
            echo "Modifying docker-compose.yml"
            yq eval 'del(.services.fallback_monitor)' docker-compose.yml > docker-compose.tmp.yml
            mv docker-compose.tmp.yml docker-compose.yml
            
            echo "Building Docker images"
            docker compose build --no-cache
            
            echo "Starting services"
            docker compose up -d
            
            echo "Cleaning up old images"
            docker image prune -f
            
            # Wait for service to be healthy
            echo "Waiting for service to become healthy..."
            for i in {1..30}; do
              if curl -s http://localhost:8000/health | grep -q "ok"; then
                echo "Service is healthy"
                exit 0
              fi
              echo "Waiting for service to become healthy... attempt $i"
              sleep 10
            done
            echo "Service failed to become healthy"
            exit 1
